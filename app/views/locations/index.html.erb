<h1>Locations#index</h1>

<div id="my-app">
  <div v-if="token == null">
    <Login />
  </div>
  <div v-else>
    Your are logged in
    <Temperature />
  </div>
</div>

<script type="text/x-template" id="login-template">
  <form>
    <input v-model="email"    type="email"    placeholder="email">
    <input v-model="password" type="password" placeholder="password">
    <button v-on:click="submit">Login </button>
  </form>
</script>

<script type="text/x-template" id="temperature-template">
  <div>
    <h4>{{ location }}</h4>
    <p>{{ temp }} F</p>
    <p>{{ status }}</p>
  </div>
</script>

<script>
  // Define the state.
  const state = {
    token: localStorage.getItem('token')
  }

  // Define <Login />.
  const loginComponent = Vue.component('Login', {
    template: "#login-template",
    data: () => ({
      email:    this.email,
      password: this.password
    }),
    methods: {
      submit: (e) => {
        e.preventDefault()
        console.log(`submitted`)
        axios.post('/api/v1/auth', {
          user: {
            email:    "user@example.com",
            password: "password"
          }
        })
        .then(response => {
          const { data } = response
          console.log(data)

          // Store the token to local storage.
          localStorage.setItem('token', data.token)

          // Update state to trigger re-render.
          state.token = data.token
        })
        .catch(error => {
          console.log(error)
        })
      }
    }
  })

  // Define <Temperature />.
  const temperatureComponent = Vue.component('Temperature', {
    template: "#temperature-template",
    data: () => ({
      location: null,
      temp:     null,
      status:   null
    }),
    created: function() {
      this.fetchData(state.token)
    },
    methods: {
      // FIXME: Cannot get data because of 401 Unauthorized. Don't know why
      fetchData: () => {
        axios.defaults.headers.common['Authorization'] = `Bearer ${state.token}`
        axios.get('/api/v1/locations/1')
          .then(response => {
            console.log(response)
            const location         = response.data.data.attributes.name
            const currentRecording = response.data.data.attributes.current
            this.location = location
            this.temp     = currentRecording.temp
            this.status   = currentRecording.status
          })
          .catch(error => {
            console.log(error)
          })
      }
    }
  })

  // Create <Root />
  const vm = new Vue({
    el:   "#my-app",
    data: state  // Any change in state will trigger re-render.
  })
</script>
